#!/usr/bin/env python3
"""
Script de Validaci√≥n de Integraci√≥n de Configuraci√≥n
===================================================

Este script valida que rag_core.py est√© usando correctamente la configuraci√≥n
centralizada de utils/config.py en lugar de su configuraci√≥n hardcodeada.
"""

import sys
import os

# A√±adir el directorio src al path
sys.path.insert(0, 'src')

def validate_config_integration():
    """Valida que la configuraci√≥n est√© integrada correctamente."""
    
    print("üîç Validando integraci√≥n de configuraci√≥n...")
    print("=" * 50)
    
    try:
        # 1. Importar la configuraci√≥n centralizada
        print("1. Importando configuraci√≥n centralizada...")
        from utils.config import Config
        print("   ‚úÖ Config importado correctamente")
        
        # 2. Verificar que UNSTRUCTURED_CONFIGS est√© disponible
        print("\n2. Verificando UNSTRUCTURED_CONFIGS...")
        unstructured_configs = Config.UNSTRUCTURED_CONFIGS
        print(f"   ‚úÖ UNSTRUCTURED_CONFIGS disponible con {len(unstructured_configs)} configuraciones")
        
        # 3. Verificar configuraciones espec√≠ficas
        print("\n3. Verificando configuraciones espec√≠ficas...")
        
        # Verificar PDF
        pdf_config = Config.get_unstructured_config('.pdf')
        print(f"   ‚úÖ Configuraci√≥n PDF: {pdf_config}")
        
        # Verificar DOCX
        docx_config = Config.get_unstructured_config('.docx')
        print(f"   ‚úÖ Configuraci√≥n DOCX: {docx_config}")
        
        # Verificar im√°genes
        png_config = Config.get_unstructured_config('.png')
        print(f"   ‚úÖ Configuraci√≥n PNG: {png_config}")
        
        # Verificar correos
        eml_config = Config.get_unstructured_config('.eml')
        print(f"   ‚úÖ Configuraci√≥n EML: {eml_config}")
        
        # 4. Importar rag_core y verificar que use la configuraci√≥n centralizada
        print("\n4. Importando rag_core...")
        from rag_core import UNSTRUCTURED_CONFIGS, get_vector_store
        print("   ‚úÖ rag_core importado correctamente")
        
        # 5. Verificar que UNSTRUCTURED_CONFIGS en rag_core sea la misma que en Config
        print("\n5. Verificando que rag_core use configuraci√≥n centralizada...")
        if UNSTRUCTURED_CONFIGS is Config.UNSTRUCTURED_CONFIGS:
            print("   ‚úÖ rag_core usa la configuraci√≥n centralizada (misma referencia)")
        else:
            print("   ‚ö†Ô∏è rag_core tiene su propia copia de la configuraci√≥n")
        
        # 6. Verificar que las configuraciones sean id√©nticas
        print("\n6. Verificando que las configuraciones sean id√©nticas...")
        core_configs = UNSTRUCTURED_CONFIGS
        central_configs = Config.UNSTRUCTURED_CONFIGS
        
        if core_configs == central_configs:
            print("   ‚úÖ Configuraciones id√©nticas")
        else:
            print("   ‚ùå Configuraciones diferentes")
            print(f"   Core: {len(core_configs)} configuraciones")
            print(f"   Central: {len(central_configs)} configuraciones")
        
        # 7. Verificar que get_vector_store funcione
        print("\n7. Verificando get_vector_store...")
        try:
            vector_store = get_vector_store()
            print("   ‚úÖ get_vector_store funciona correctamente")
        except Exception as e:
            print(f"   ‚ùå Error en get_vector_store: {e}")
        
        # 8. Verificar que las funciones de carga usen Config.get_unstructured_config
        print("\n8. Verificando funciones de carga...")
        from rag_core import load_document_with_fallbacks, load_document_with_elements
        
        # Verificar que las funciones existan
        if callable(load_document_with_fallbacks):
            print("   ‚úÖ load_document_with_fallbacks disponible")
        else:
            print("   ‚ùå load_document_with_fallbacks no disponible")
            
        if callable(load_document_with_elements):
            print("   ‚úÖ load_document_with_elements disponible")
        else:
            print("   ‚ùå load_document_with_elements no disponible")
        
        print("\n" + "=" * 50)
        print("üéâ Validaci√≥n completada exitosamente!")
        print("‚úÖ rag_core.py est√° usando correctamente la configuraci√≥n centralizada")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error durante la validaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def show_configuration_summary():
    """Muestra un resumen de la configuraci√≥n actual."""
    
    print("\nüìã Resumen de Configuraci√≥n")
    print("=" * 30)
    
    try:
        from utils.config import Config
        
        print(f"üìÅ Directorio de documentos: {Config.CONVERTED_DOCS_DIR}")
        print(f"üóÑÔ∏è Directorio vector store: {Config.VECTOR_STORE_DIR}")
        print(f"üíæ Directorio cache: {Config.EMBEDDING_CACHE_DIR}")
        print(f"ü§ñ Modelo de embedding: {Config.EMBEDDING_MODEL}")
        print(f"‚öôÔ∏è Dispositivo: {Config.DEVICE}")
        print(f"üìè Tama√±o de chunk por defecto: {Config.DEFAULT_CHUNK_SIZE}")
        print(f"üîÑ Overlap de chunk por defecto: {Config.DEFAULT_CHUNK_OVERLAP}")
        print(f"üì¶ Tama√±o m√°ximo de cache: {Config.MAX_CACHE_SIZE}")
        
        # Mostrar tipos de archivo soportados
        supported_formats = list(Config.UNSTRUCTURED_CONFIGS.keys())
        print(f"\nüìÑ Formatos soportados ({len(supported_formats)}):")
        for i, format_type in enumerate(supported_formats):
            if i % 5 == 0:
                print("   ", end="")
            print(f"{format_type} ", end="")
            if (i + 1) % 5 == 0:
                print()
        print()
        
    except Exception as e:
        print(f"‚ùå Error mostrando resumen: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando validaci√≥n de integraci√≥n de configuraci√≥n...")
    
    success = validate_config_integration()
    
    if success:
        show_configuration_summary()
        print("\n‚úÖ Sistema listo para usar con configuraci√≥n centralizada")
    else:
        print("\n‚ùå Hay problemas con la integraci√≥n de configuraci√≥n")
        sys.exit(1) 